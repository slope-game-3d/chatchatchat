const DEBUG = true;

function log(...args) {
    if (DEBUG) {
        console.log(...args);
    }
}

let socket;
let userId; // L∆∞u tr·ªØ ID c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');
const nextButton = document.getElementById('nextButton');
let localStream;
let peerConnection;
const localVideo = document.getElementById('localVideo');
const remoteVideo = document.getElementById('remoteVideo');
const toggleVideoBtn = document.getElementById('toggleVideo');
const toggleAudioBtn = document.getElementById('toggleAudio');
const statusIndicator = document.querySelector('.status-indicator');
const statusText = document.querySelector('.status-text');
const chatMode = localStorage.getItem('chatMode') || 'text';
const videoContainer = document.querySelector('.video-container');

// Th√™m bi·∫øn to√†n c·ª•c
let autoConnectInterval;
let isAutoConnecting = false;

// Th√™m bi·∫øn ƒë·ªÉ theo d√µi th·ªùi gian k·∫øt n·ªëi
let lastConnectionTime = 0;

// Th√™m bi·∫øn ƒë·ªÉ theo d√µi th·ªùi gian cu·ªëi c√πng nh·∫•n n√∫t
let lastTap = 0;

// Th√™m c√°c bi·∫øn cho n√∫t fullscreen
const fullscreenLocalBtn = document.getElementById('fullscreenLocal');
const fullscreenRemoteBtn = document.getElementById('fullscreenRemote');

// Th√™m bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi
let isConnected = false;

// Th√™m bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i WebSocket
let isClosingSocket = false;

// Th√™m bi·∫øn ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i k·∫øt n·ªëi
let isReconnecting = false;
let reconnectTimeout = null;

// Th√™m bi·∫øn ƒë·ªÉ theo d√µi s·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi l·∫°i
let reconnectAttempts = 0;
const MAX_RECONNECT_ATTEMPTS = 5;

// Th√™m bi·∫øn ƒë·ªÉ theo d√µi s·ªë ng∆∞·ªùi online
let onlineCount = 0;

// Th√™m object ch·ª©a c√°c emoji theo category
const emojis = {
    smileys: ['üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÖ', 'üòÇ', 'ü§£', 'üòä', 'üòá', 'üôÇ', 'üòâ', 'üòå', 'üòç', 'ü•∞', 'üòò'],
    gestures: ['üëã', 'ü§ö', '‚úã', 'üñêÔ∏è', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ'],
    love: ['‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'ü§é', 'üñ§', 'ü§ç', 'üíØ', 'üí¢', 'üí•', 'üí´', 'üí¶'],
    animals: ['üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏'],
    food: ['üçè', 'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçà', 'üçí', 'üçë', 'ü•≠']
};

// Th√™m bi·∫øn ƒë·ªÉ theo d√µi th·ªùi gian ƒë·∫øm ng∆∞·ª£c
let autoConnectCountdown = null;
let countdownInterval = null;

// Th√™m bi·∫øn ƒë·ªÉ qu·∫£n l√Ω timeout khi t√¨m ng∆∞·ªùi
let matchTimeoutId = null;
let videoPlayer = null;
let isPlayingRandomVideo = false;
const randomVideoTimeout = 5000; // Gi·∫£m t·ª´ 8s xu·ªëng 5s ƒë·ªÉ match nhanh h∆°n
const randomVideoAfterNextTimeout = 6000; // Gi·∫£m t·ª´ 10s xu·ªëng 6s

// Danh s√°ch video m·∫´u - s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·∫±ng danh s√°ch th·ª±c t·ª´ server
let availableVideos = [
    'https://papasfreezeria.one/video/97671472-179909.mp4',
    'https://papasfreezeria.one/video/almiraa68_2025.01.07_16.06.42.mp4',
    'https://papasfreezeria.one/video/almiraa68_2025.01.16_14.33.07.mp4',
    'https://papasfreezeria.one/video/video_2025-04-11_22-58-20.mp4'
];

// Th√™m bi·∫øn ƒë·ªÉ theo d√µi video ƒë√£ xem
let watchedVideos = new Set();

// Th√™m bi·∫øn ƒë·ªÉ qu·∫£n l√Ω video ƒë√£ xem
let currentPlayingVideo = null;

// Th√™m h√†m ƒë·ªÉ shuffle m·∫£ng
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

// C·∫≠p nh·∫≠t h√†m fetchAvailableVideos ƒë·ªÉ y√™u c·∫ßu danh s√°ch video ch∆∞a xem
async function fetchAvailableVideos() {
    try {
        // Y√™u c·∫ßu danh s√°ch video ch∆∞a xem t·ª´ server
        const url = userId ? `/list-videos?userId=${userId}` : '/list-videos';
        const response = await fetch(url);
        
        if (response.ok) {
            const serverVideos = await response.json();
            log('Fetched unwatched videos list:', serverVideos);
            
            // N·∫øu server tr·∫£ v·ªÅ danh s√°ch video kh√¥ng r·ªóng th√¨ s·ª≠ d·ª•ng danh s√°ch ƒë√≥
            if (serverVideos && serverVideos.length > 0) {
                // Shuffle k·ªπ h∆°n b·∫±ng c√°ch th·ª±c hi·ªán nhi·ªÅu l·∫ßn
                availableVideos = serverVideos;
                for (let i = 0; i < 3; i++) {
                    availableVideos = shuffleArray([...availableVideos]);
                }
            } else {
                log('Server returned empty video list, using default videos');
                // Shuffle danh s√°ch video m·∫∑c ƒë·ªãnh
                availableVideos = [
                    'https://papasfreezeria.one/video/97671472-179909.mp4',
                    'https://papasfreezeria.one/video/almiraa68_2025.01.07_16.06.42.mp4',
                    'https://papasfreezeria.one/video/almiraa68_2025.01.16_14.33.07.mp4',
                    'https://papasfreezeria.one/video/video_2025-04-11_22-58-20.mp4'
                ];
                for (let i = 0; i < 3; i++) {
                    availableVideos = shuffleArray([...availableVideos]);
                }
            }
        } else {
            log('Failed to fetch videos, using default list');
            // Shuffle danh s√°ch video m·∫∑c ƒë·ªãnh
            availableVideos = [
                'https://papasfreezeria.one/video/97671472-179909.mp4',
                'https://papasfreezeria.one/video/almiraa68_2025.01.07_16.06.42.mp4',
                'https://papasfreezeria.one/video/almiraa68_2025.01.16_14.33.07.mp4',
                'https://papasfreezeria.one/video/video_2025-04-11_22-58-20.mp4'
            ];
            for (let i = 0; i < 3; i++) {
                availableVideos = shuffleArray([...availableVideos]);
            }
        }
    } catch (error) {
        console.error('Error fetching video list:', error);
        // Shuffle danh s√°ch video m·∫∑c ƒë·ªãnh
        availableVideos = [
            'https://papasfreezeria.one/video/97671472-179909.mp4',
            'https://papasfreezeria.one/video/almiraa68_2025.01.07_16.06.42.mp4',
            'https://papasfreezeria.one/video/almiraa68_2025.01.16_14.33.07.mp4',
            'https://papasfreezeria.one/video/video_2025-04-11_22-58-20.mp4'
        ];
        for (let i = 0; i < 3; i++) {
            availableVideos = shuffleArray([...availableVideos]);
        }
    }
    
    console.log('Final video list to use (shuffled):', availableVideos);
}

// Th√™m h√†m ƒë·ªÉ g·ª≠i b√°o c√°o video ƒë√£ xem
function reportVideoWatched(videoPath) {
    if (!videoPath || !socket || socket.readyState !== WebSocket.OPEN) return;
    
    try {
        socket.send(JSON.stringify({
            type: 'videoWatched',
            videoPath: videoPath
        }));
        log('Reported watched video:', videoPath);
    } catch (error) {
        console.error('Error reporting watched video:', error);
    }
}

// Th√™m h√†m ƒë·ªÉ y√™u c·∫ßu danh s√°ch video ch∆∞a xem tr·ª±c ti·∫øp t·ª´ WebSocket
function requestUnwatchedVideos() {
    if (!socket || socket.readyState !== WebSocket.OPEN) return;
    
    try {
        socket.send(JSON.stringify({
            type: 'getUnwatchedVideos'
        }));
        log('Requested unwatched videos list');
    } catch (error) {
        console.error('Error requesting unwatched videos:', error);
    }
}

// Th√™m h√†m ph√°t video ng·∫´u nhi√™n
function playRandomVideo() {
    if (isConnected || isPlayingRandomVideo) return;
    
    // N·∫øu danh s√°ch video tr·ªëng ho·∫∑c ƒë√£ xem h·∫øt, y√™u c·∫ßu danh s√°ch m·ªõi
    if (!availableVideos || availableVideos.length === 0) {
        log('No videos available, requesting new list');
        
        // Y√™u c·∫ßu danh s√°ch video ch∆∞a xem tr·ª±c ti·∫øp t·ª´ WebSocket n·∫øu ƒëang k·∫øt n·ªëi
        if (socket && socket.readyState === WebSocket.OPEN) {
            requestUnwatchedVideos();
            
            // ƒê·∫∑t handler cho vi·ªác nh·∫≠n danh s√°ch video
            const videoListHandler = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    if (data.type === 'unwatchedVideos') {
                        // C·∫≠p nh·∫≠t danh s√°ch video v√† ph√°t n·∫øu c√≥ video
                        availableVideos = data.videos;
                        if (availableVideos && availableVideos.length > 0) {
                            // Shuffle danh s√°ch
                            availableVideos = shuffleArray([...availableVideos]);
                            // X√≥a handler v√† ti·∫øp t·ª•c ph√°t video
                            socket.removeEventListener('message', videoListHandler);
                            playRandomVideo();
                        }
                    }
                } catch (error) {
                    console.error('Error handling video list response:', error);
                }
            };
            
            // Th√™m handler t·∫°m th·ªùi
            socket.addEventListener('message', videoListHandler);
            
            // ƒê·∫∑t timeout ƒë·ªÉ tr√°nh treo n·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
            setTimeout(() => {
                socket.removeEventListener('message', videoListHandler);
                // N·∫øu v·∫´n kh√¥ng c√≥ video, s·ª≠ d·ª•ng danh s√°ch m·∫∑c ƒë·ªãnh
                if (!availableVideos || availableVideos.length === 0) {
                    availableVideos = [
                        'https://papasfreezeria.one/video/97671472-179909.mp4',
                        'https://papasfreezeria.one/video/almiraa68_2025.01.07_16.06.42.mp4',
                        'https://papasfreezeria.one/video/almiraa68_2025.01.16_14.33.07.mp4',
                        'https://papasfreezeria.one/video/video_2025-04-11_22-58-20.mp4'
                    ];
                    availableVideos = shuffleArray([...availableVideos]);
                    playRandomVideo();
                }
            }, 3000);
            
            return;
        } else {
            // N·∫øu kh√¥ng k·∫øt n·ªëi WebSocket, d√πng fetch API
            fetchAvailableVideos().then(() => {
                if (availableVideos && availableVideos.length > 0) {
                    playRandomVideo();
                }
            });
            return;
        }
    }
    
    isPlayingRandomVideo = true;
    
    // Ch·ªçn video ng·∫´u nhi√™n t·ª´ danh s√°ch
    const randomIndex = Math.floor(Math.random() * availableVideos.length);
    currentPlayingVideo = availableVideos[randomIndex];
    
    // ƒê√°nh d·∫•u video n√†y ƒë√£ xem
    reportVideoWatched(currentPlayingVideo);
    
    // T·∫°o element video n·∫øu ch∆∞a c√≥
    if (!videoPlayer) {
        videoPlayer = document.createElement('video');
        videoPlayer.style.width = '100%';
        videoPlayer.style.height = '100%';
        videoPlayer.style.objectFit = 'cover';
        videoPlayer.style.position = 'absolute';
        videoPlayer.style.top = '0';
        videoPlayer.style.left = '0';
        videoPlayer.style.zIndex = '1';
        videoPlayer.controls = false;
        videoPlayer.autoplay = true;
        videoPlayer.muted = false;
        videoPlayer.playsInline = true;
        videoPlayer.loop = false; // T·∫Øt loop video
        videoPlayer.disablePictureInPicture = true;
        
        // Th√™m event listener cho khi video k·∫øt th√∫c
        videoPlayer.addEventListener('ended', handleVideoEnd);
        
        // NgƒÉn ch·∫∑n menu chu·ªôt ph·∫£i
        videoPlayer.addEventListener('contextmenu', (e) => {
            e.preventDefault();
            return false;
        });
        
        const remoteWrapper = document.querySelector('.video-wrapper.remote');
        
        if (remoteVideo) {
            remoteVideo.style.display = 'none';
        }
        
        const strangerLabel = remoteWrapper.querySelector('.video-label');
        if (strangerLabel) {
            strangerLabel.style.zIndex = '2';
            strangerLabel.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
            strangerLabel.style.color = 'white';
            strangerLabel.textContent = 'Stranger';
        }
        
        remoteWrapper.appendChild(videoPlayer);
    }
    
    // Set ngu·ªìn video
    videoPlayer.src = currentPlayingVideo;
    videoPlayer.style.display = 'block';
    
    // Ph√°t video
    playVideoSafely(videoPlayer).catch(error => {
        console.error('Error playing video:', error);
        stopRandomVideo();
        
        // N·∫øu kh√¥ng ph√°t ƒë∆∞·ª£c video, th·ª≠ video kh√°c sau 1 gi√¢y
        setTimeout(() => {
            if (!isConnected) {
                // X√≥a video hi·ªán t·∫°i kh·ªèi danh s√°ch ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
                availableVideos = availableVideos.filter(v => v !== currentPlayingVideo);
                currentPlayingVideo = null;
                
                // N·∫øu c√≤n video trong danh s√°ch, th·ª≠ ph√°t video kh√°c
                if (availableVideos.length > 0) {
                    playRandomVideo();
                } else {
                    // N·∫øu h·∫øt video, y√™u c·∫ßu danh s√°ch m·ªõi
                    fetchAvailableVideos();
                }
            }
        }, 1000);
    });
    
    // Thay ƒë·ªïi tr·∫°ng th√°i th√†nh "ƒë√£ k·∫øt n·ªëi"
    updateConnectionStatus('connected');
    addSystemMessage('Connected with a stranger!');
}

function stopRandomVideo() {
    if (!isPlayingRandomVideo) return;
    
    isPlayingRandomVideo = false;
    
    if (videoPlayer) {
        videoPlayer.pause();
        videoPlayer.src = '';
        videoPlayer.style.display = 'none';
        
        const remoteWrapper = document.querySelector('.video-wrapper.remote');
        
        if (remoteVideo) {
            remoteVideo.style.display = 'block';
        }
        
        const strangerLabel = remoteWrapper.querySelector('.video-label');
        if (strangerLabel) {
            strangerLabel.style.backgroundColor = '';
            strangerLabel.style.color = '';
        }
    }
    
    // X√≥a video hi·ªán t·∫°i kh·ªèi danh s√°ch ƒë·ªÉ tr√°nh l·∫∑p l·∫°i ngay l·∫≠p t·ª©c
    if (currentPlayingVideo) {
        availableVideos = availableVideos.filter(v => v !== currentPlayingVideo);
        currentPlayingVideo = null;
    }
}

// Th√™m h√†m l·∫•y th√¥ng tin TURN server t·ª´ Twilio
async function getTurnCredentials() {
    try {
        const response = await fetch('/get-turn-credentials');
        const credentials = await response.json();
        return credentials;
    } catch (error) {
        console.error('L·ªói khi l·∫•y th√¥ng tin TURN server:', error);
        return null;
    }
}

// C·∫•u h√¨nh STUN/TURN servers
const configuration = {
    iceServers: [
        {
            urls: [
                'stun:stun1.l.google.com:19302',
                'stun:stun2.l.google.com:19302'
            ]
        },
        {
            urls: 'turn:your-turn-server.com:3478',
            username: 'your-username',
            credential: 'your-password'
        }
    ],
    iceCandidatePoolSize: 10
};

// Th√™m n√∫t fullscreen v√†o video container
function addFullscreenButton() {
    const fullscreenBtn = document.createElement('button');
    fullscreenBtn.className = 'fullscreen-btn';
    fullscreenBtn.innerHTML = '<i class="fas fa-expand"></i>';
    videoContainer.appendChild(fullscreenBtn);

    // X·ª≠ l√Ω s·ª± ki·ªán click
    fullscreenBtn.addEventListener('click', toggleFullscreen);
}

// Th√™m c√°c h√†m x·ª≠ l√Ω fullscreen
function toggleFullscreen(element) {
    if (!document.fullscreenElement) {
        if (element.requestFullscreen) {
            element.requestFullscreen();
        } else if (element.webkitRequestFullscreen) {
            element.webkitRequestFullscreen();
        } else if (element.msRequestFullscreen) {
            element.msRequestFullscreen();
        }
    } else {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) {
            document.msExitFullscreen();
        }
    }
}

// Th√™m event listeners cho n√∫t fullscreen
document.addEventListener('DOMContentLoaded', () => {
    const fullscreenLocalBtn = document.getElementById('fullscreenLocal');
    const fullscreenRemoteBtn = document.getElementById('fullscreenRemote');
    const localWrapper = document.querySelector('.video-wrapper.local');
    const remoteWrapper = document.querySelector('.video-wrapper.remote');

    fullscreenLocalBtn.addEventListener('click', () => {
        const isFullscreen = localWrapper.classList.contains('fullscreen');
        
        // Remove fullscreen from both wrappers
        localWrapper.classList.remove('fullscreen');
        remoteWrapper.classList.remove('fullscreen');
        
        if (!isFullscreen) {
            localWrapper.classList.add('fullscreen');
            fullscreenLocalBtn.querySelector('i').classList.replace('fa-expand', 'fa-compress');
        } else {
            fullscreenLocalBtn.querySelector('i').classList.replace('fa-compress', 'fa-expand');
        }
    });

    fullscreenRemoteBtn.addEventListener('click', () => {
        const isFullscreen = remoteWrapper.classList.contains('fullscreen');
        
        // Remove fullscreen from both wrappers
        localWrapper.classList.remove('fullscreen');
        remoteWrapper.classList.remove('fullscreen');
        
        if (!isFullscreen) {
            remoteWrapper.classList.add('fullscreen');
            fullscreenRemoteBtn.querySelector('i').classList.replace('fa-expand', 'fa-compress');
        } else {
            fullscreenRemoteBtn.querySelector('i').classList.replace('fa-compress', 'fa-expand');
        }
    });

    // Handle ESC key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            localWrapper.classList.remove('fullscreen');
            remoteWrapper.classList.remove('fullscreen');
            fullscreenLocalBtn.querySelector('i').classList.replace('fa-compress', 'fa-expand');
            fullscreenRemoteBtn.querySelector('i').classList.replace('fa-compress', 'fa-expand');
        }
    });
});

// C·∫≠p nh·∫≠t h√†m playVideoSafely
async function playVideoSafely(videoElement) {
    try {
        // Ki·ªÉm tra xem video c√≥ srcObject kh√¥ng
        if (!videoElement.srcObject) {
            return;
        }

        // ƒê·ª£i video s·∫µn s√†ng
        if (videoElement.readyState >= 2) { // HAVE_CURRENT_DATA
            try {
                const playPromise = videoElement.play();
                if (playPromise !== undefined) {
                    await playPromise;
                }
            } catch (error) {
                if (error.name === 'NotAllowedError') {
                    console.log('Autoplay prevented by browser');
                } else if (error.name === 'AbortError') {
                    console.log('Play request was interrupted, will retry');
                    // Th·ª≠ l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn
                    setTimeout(() => playVideoSafely(videoElement), 1000);
                } else {
                    console.error('Error playing video:', error);
                }
            }
        } else {
            // ƒê·ª£i video load ƒë·ªß d·ªØ li·ªáu
            videoElement.addEventListener('loadeddata', async () => {
                try {
                    await videoElement.play();
                } catch (error) {
                    console.error('Error playing video after load:', error);
                }
            }, { once: true });
        }
    } catch (error) {
        console.error('Error in playVideoSafely:', error);
    }
}

// C·∫≠p nh·∫≠t h√†m initializeMedia
async function initializeMedia() {
    if (chatMode === 'text') {
        videoContainer.style.display = 'none';
        return true;
    }

    try {
        // D·ª´ng stream c≈© n·∫øu c√≥
        if (localStream) {
            localStream.getTracks().forEach(track => track.stop());
        }

        localStream = await navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        });

        console.log('Got local stream:', localStream.getTracks());
        
        // D·ª´ng video c≈© n·∫øu ƒëang ph√°t
        if (localVideo.srcObject) {
            try {
                localVideo.pause();
                const tracks = localVideo.srcObject.getTracks();
                tracks.forEach(track => track.stop());
            } catch (error) {
                console.error('Error stopping old video:', error);
            }
        }

        localVideo.srcObject = localStream;
        
        // ƒê·ª£i m·ªôt ch√∫t tr∆∞·ªõc khi ph√°t video
        setTimeout(() => {
            playVideoSafely(localVideo);
        }, 100);

        // Th√™m event listeners cho c√°c n√∫t ƒëi·ªÅu khi·ªÉn
        toggleVideoBtn.addEventListener('click', toggleVideo);
        toggleAudioBtn.addEventListener('click', toggleAudio);
        
        return true;
    } catch (e) {
        console.error('L·ªói khi truy c·∫≠p camera:', e);
        addSystemMessage('Kh√¥ng th·ªÉ truy c·∫≠p camera ho·∫∑c microphone. L·ªói: ' + e.message);
        return false;
    }
}

// B·∫≠t/t·∫Øt video
function toggleVideo() {
    const videoTrack = localStream.getVideoTracks()[0];
    videoTrack.enabled = !videoTrack.enabled;
    toggleVideoBtn.textContent = videoTrack.enabled ? 'Camera off' : 'Camera on';
    toggleVideoBtn.classList.toggle('disabled');
}

// B·∫≠t/t·∫Øt audio
function toggleAudio() {
    const audioTrack = localStream.getAudioTracks()[0];
    audioTrack.enabled = !audioTrack.enabled;
    toggleAudioBtn.textContent = audioTrack.enabled ? 'Mic off' : 'Mic on';
    toggleAudioBtn.classList.toggle('disabled');
}

// C·∫≠p nh·∫≠t h√†m initializePeerConnection
async function initializePeerConnection() {
    try {
        if (peerConnection) {
            peerConnection.close();
            peerConnection = null;
        }

        peerConnection = new RTCPeerConnection(configuration);
        console.log('PeerConnection created');

        // Th√™m local stream
        if (localStream) {
            localStream.getTracks().forEach(track => {
                console.log('Adding local track to peer connection:', track.kind);
                peerConnection.addTrack(track, localStream);
            });
        }

        // X·ª≠ l√Ω remote stream
        peerConnection.ontrack = event => {
            console.log('Received remote track:', event.track.kind);
            if (event.streams && event.streams[0]) {
                console.log('Setting remote stream');
                remoteVideo.srcObject = event.streams[0];
                
                // Th√™m event listener ƒë·ªÉ ƒë·∫£m b·∫£o video ƒë∆∞·ª£c ph√°t
                remoteVideo.onloadedmetadata = () => {
                    console.log('Remote video metadata loaded');
                    playVideoSafely(remoteVideo);
                };
            }
        };

        // X·ª≠ l√Ω ICE candidates
        peerConnection.onicecandidate = event => {
            if (event.candidate) {
                console.log('Sending ICE candidate');
                if (socket && socket.readyState === WebSocket.OPEN) {
                    socket.send(JSON.stringify({
                        type: 'webrtc',
                        webrtcData: {
                            type: 'candidate',
                            candidate: event.candidate
                        }
                    }));
                }
            }
        };

        // X·ª≠ l√Ω tr·∫°ng th√°i k·∫øt n·ªëi ICE
        peerConnection.oniceconnectionstatechange = () => {
            console.log('ICE connection state:', peerConnection.iceConnectionState);
            switch(peerConnection.iceConnectionState) {
                case 'checking':
                    addSystemMessage('Checking video connection...');
                    break;
                case 'connected':
                    addSystemMessage('Video connection established');
                    break;
                case 'failed':
                    console.log('ICE connection failed, restarting...');
                    addSystemMessage('Video connection failed, trying to reconnect...');
                    restartIce();
                    break;
                case 'disconnected':
                    addSystemMessage('Video connection disconnected');
                    break;
            }
        };

        // Th√™m x·ª≠ l√Ω negotiation
        peerConnection.onnegotiationneeded = async () => {
            try {
                console.log('Creating offer...');
                const offer = await peerConnection.createOffer({
                    offerToReceiveAudio: true,
                    offerToReceiveVideo: true
                });
                await peerConnection.setLocalDescription(offer);
                
                if (socket && socket.readyState === WebSocket.OPEN) {
                    socket.send(JSON.stringify({
                        type: 'webrtc',
                        webrtcData: {
                            type: 'offer',
                            offer: peerConnection.localDescription
                        }
                    }));
                }
            } catch (e) {
                console.error('Error during negotiation:', e);
            }
        };

        return true;
    } catch (error) {
        console.error('Error initializing peer connection:', error);
        return false;
    }
}

// Th√™m h√†m restart ICE
async function restartIce() {
    try {
        const offer = await peerConnection.createOffer({ iceRestart: true });
        await peerConnection.setLocalDescription(offer);
        socket.send(JSON.stringify({
            type: 'webrtc',
            webrtcData: {
                type: 'offer',
                offer: offer
            }
        }));
    } catch (e) {
        console.error('L·ªói khi restart ICE:', e);
    }
}

// C·∫≠p nh·∫≠t h√†m updateConnectionStatus
function updateConnectionStatus(status) {
    switch(status) {
        case 'connecting':
            statusIndicator.style.backgroundColor = '#ffd700'; // M√†u v√†ng
            statusText.textContent = 'Connecting...';
            isConnected = false;
            break;
        case 'connected':
            statusIndicator.style.backgroundColor = '#4CAF50'; // M√†u xanh
            statusText.textContent = 'Connected';
            isConnected = true; // ƒê√°nh d·∫•u ƒë√£ k·∫øt n·ªëi
            lastConnectionTime = Date.now();
            break;
        case 'disconnected':
            statusIndicator.style.backgroundColor = '#ff4444'; // M√†u ƒë·ªè
            statusText.textContent = 'Disconnected';
            isConnected = false;
            break;
        case 'waiting':
            statusIndicator.style.backgroundColor = '#2196F3'; // M√†u xanh d∆∞∆°ng
            statusText.textContent = 'Waiting for stranger...';
            isConnected = false;
            break;
    }
}

// C·∫≠p nh·∫≠t h√†m connectWebSocket ƒë·ªÉ ch·ªânh s·ª≠a qu√° tr√¨nh k·∫øt n·ªëi
function connectWebSocket() {
    if (isReconnecting || reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {
        console.log('Max reconnection attempts reached or already reconnecting');
        return;
    }

    // ƒê√≥ng socket c≈© m·ªôt c√°ch an to√†n
    closeSocketSafely();

    isReconnecting = true;
    reconnectAttempts++;

    try {
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const host = window.location.hostname === 'localhost' ? 
            `${window.location.hostname}:3000` : 
            window.location.host;
        const wsUrl = `${protocol}//${host}`;
        
        console.log('Connecting to WebSocket:', wsUrl);
        socket = new WebSocket(wsUrl);
        
        // Thi·∫øt l·∫≠p timeout cho k·∫øt n·ªëi
        const connectionTimeout = setTimeout(() => {
            if (socket && socket.readyState !== WebSocket.OPEN) {
                console.log('Connection timeout, closing socket');
                closeSocketSafely();
                connectWebSocket(); // Th·ª≠ k·∫øt n·ªëi l·∫°i
            }
        }, 5000);

        socket.onopen = async () => {
            clearTimeout(connectionTimeout);
            console.log('WebSocket connected successfully');
            isClosingSocket = false;
            isReconnecting = false;
            reconnectAttempts = 0;
            updateConnectionStatus('waiting');
            
            // Kh·ªüi t·∫°o media tr∆∞·ªõc khi t√¨m partner
            const mediaInitialized = await initializeMedia();
            console.log('Media initialized:', mediaInitialized);
            
            if (mediaInitialized && chatMode === 'video') {
                await initializePeerConnection();
            }
            
            // X√≥a timeout c≈© n·∫øu c√≥
            if (matchTimeoutId) {
                clearTimeout(matchTimeoutId);
            }
            
            // ƒê·∫∑t timeout ƒë·ªÉ ph√°t video ng·∫´u nhi√™n n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c ng∆∞·ªùi
            matchTimeoutId = setTimeout(() => {
                if (!isConnected) {
                    console.log('No match found, playing random video');
                    playRandomVideo();
                }
            }, randomVideoTimeout);
        };

        socket.addEventListener('message', (event) => {
            try {
                const data = JSON.parse(event.data);
                
                // X·ª≠ l√Ω danh s√°ch video ch∆∞a xem
                if (data.type === 'unwatchedVideos') {
                    availableVideos = data.videos;
                    log('Received unwatched videos list:', availableVideos);
                    // Shuffle danh s√°ch video
                    if (availableVideos && availableVideos.length > 0) {
                        availableVideos = shuffleArray([...availableVideos]);
                    }
                    return;
                }
                
                log('Received message:', data);

                switch (data.type) {
                    case 'userId':
                        userId = data.userId;
                        log('User ID set to:', userId);
                        break;

                    case 'system':
                        // X·ª≠ l√Ω c√°c th√¥ng b√°o h·ªá th·ªëng
                        if (data.text === 'Connected with a stranger!') {
                            log('Connected with stranger, handling connection');
                            // ∆Øu ti√™n k·∫øt n·ªëi v·ªõi ng∆∞·ªùi th·∫≠t
                            if (isPlayingRandomVideo) {
                                stopRandomVideo();
                            }
                            handleUserConnected();
                        } else if (data.text === 'Stranger has disconnected') {
                            log('Stranger disconnected, handling disconnect');
                            handleDisconnect();
                            // L∆∞u √Ω: kh√¥ng c·∫ßn th√™m addSystemMessage ·ªü ƒë√¢y v√¨ ƒë√£ ƒë∆∞·ª£c g·ªçi trong handleDisconnect
                            break;
                        } else if (data.text === 'Waiting for a stranger...') {
                            updateConnectionStatus('waiting');
                            isConnected = false;
                            
                            // Hi·ªÉn th·ªã th√¥ng b√°o
                            addSystemMessage(data.text);
                            
                            // ƒê·∫∑t timeout ƒë·ªÉ ph√°t video ng·∫´u nhi√™n n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c ng∆∞·ªùi
                            if (!isAutoConnecting && !matchTimeoutId) {
                                matchTimeoutId = setTimeout(() => {
                                    if (!isConnected) {
                                        playRandomVideo();
                                    }
                                }, randomVideoTimeout);
                            }
                            break;
                        } else {
                            // Hi·ªÉn th·ªã c√°c th√¥ng b√°o h·ªá th·ªëng kh√°c
                            addSystemMessage(data.text);
                        }
                        break;

                    case 'message':
                        addMessage(data.text, 'stranger');
                        break;

                    case 'webrtc':
                        handleWebRTCMessage(data);
                        break;

                    case 'online_count':
                        // C·∫≠p nh·∫≠t s·ªë ng∆∞·ªùi online
                        if (data.count) {
                            const onlineCountElement = document.getElementById('onlineCount');
                            if (onlineCountElement) {
                                onlineCountElement.textContent = formatOnlineCount(data.count);
                        }
                        }
                        break;

                    default:
                        log('Unknown message type:', data.type);
                }
            } catch (error) {
                console.error('Error handling socket message:', error);
            }
        });
        
        socket.onclose = (event) => {
            console.log('WebSocket closed with code:', event.code);
            if (!isClosingSocket && !isReconnecting && reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
                updateConnectionStatus('disconnected');
                const delay = Math.min(1000 * Math.pow(2, reconnectAttempts), 10000);
                reconnectTimeout = setTimeout(() => {
                    if (!isClosingSocket) {
                        console.log(`Attempting to reconnect (${reconnectAttempts + 1}/${MAX_RECONNECT_ATTEMPTS})`);
                        connectWebSocket();
                    }
                }, delay);
            }
        };

        socket.onerror = (error) => {
            console.error('WebSocket error:', error);
            if (!isClosingSocket) {
                updateConnectionStatus('disconnected');
            }
        };

    } catch (error) {
        console.error('Error creating WebSocket:', error);
        updateConnectionStatus('disconnected');
        isReconnecting = false;
    }
}

// Th√™m h√†m ƒë√≥ng socket an to√†n
function closeSocketSafely() {
    if (socket) {
        try {
            isClosingSocket = true;
            // X√≥a t·∫•t c·∫£ event listeners
            socket.onclose = null;
            socket.onerror = null;
            socket.onmessage = null;
            socket.onopen = null;
            
            // ƒê√≥ng socket n·∫øu ƒëang m·ªü
            if (socket.readyState === WebSocket.OPEN) {
                socket.close();
            }
            socket = null;
        } catch (error) {
            console.error('Error closing socket:', error);
        }
    }
}

// Th√™m tin nh·∫Øn v√†o khung chat
function addMessage(text, type) {
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message', type);
    messageDiv.textContent = text;
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Th√™m tin nh·∫Øn h·ªá th·ªëng
function addSystemMessage(text) {
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message', 'system');
    
    // Translate messages
    switch(text) {
        case 'Connecting...':
            text = 'Connecting...';
            break;
        case 'Connected with a stranger':
            text = 'Connected with a stranger!';
            break;
        case 'Stranger has disconnected':
            text = 'Stranger has disconnected';
            break;
        case 'ƒêWaiting for a stranger...':
            text = 'Waiting for a stranger...';
            break;
        case 'Lost connection to server':
            text = 'Lost connection to server';
            break;
        case 'Connection error':
            text = 'Connection error';
            break;
        case 'Looking for a stranger...':
            text = 'Looking for a stranger...';
            break;
        case 'Video connection successful!':
            text = 'Video connection successful!';
            break;
        case 'Video connection failed. Retrying...':
            text = 'Video connection failed. Retrying...';
            break;
        case 'Setting up video connection...':
            text = 'Setting up video connection...';
            break;
    }
    
    messageDiv.textContent = text;
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// C·∫≠p nh·∫≠t h√†m toggleAutoConnect
function toggleAutoConnect() {
    const autoConnectBtn = document.getElementById('autoConnectBtn');
    const statusBadge = autoConnectBtn.querySelector('.status-badge');
    
    if (isAutoConnecting) {
        // T·∫Øt auto connect
        isAutoConnecting = false;
        statusBadge.textContent = 'Off';
        clearInterval(autoConnectInterval);
        // X√≥a ƒë·∫øm ng∆∞·ª£c
        if (countdownInterval) {
            clearInterval(countdownInterval);
            countdownInterval = null;
        }
    } else {
        // B·∫≠t auto connect
        isAutoConnecting = true;
        statusBadge.textContent = '10s';
        autoConnectCountdown = 10;
        
        // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c
        countdownInterval = setInterval(() => {
            autoConnectCountdown--;
            if (autoConnectCountdown >= 0) {
                statusBadge.textContent = `${autoConnectCountdown}s`;
            }
            if (autoConnectCountdown === 0) {
                autoConnectCountdown = 10;
            }
        }, 1000);

        // T·ª± ƒë·ªông next sau m·ªói 10 gi√¢y
        autoConnectInterval = setInterval(() => {
            if (socket && socket.readyState === WebSocket.OPEN) {
                findNewPartner();
            }
        }, 10000);
    }
}

// Th√™m event listener cho n√∫t auto connect
document.addEventListener('DOMContentLoaded', () => {
    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ ƒë·ªìng √Ω ƒëi·ªÅu kho·∫£n ch∆∞a
    if (localStorage.getItem('termsAccepted') !== 'true') {
        window.location.href = './index.html';
        return;
    }

    // K·∫øt n·ªëi WebSocket
    connectWebSocket();

    // Th√™m event listener cho n√∫t auto connect
    const autoConnectBtn = document.getElementById('autoConnectBtn');
    autoConnectBtn.addEventListener('click', toggleAutoConnect);
    
    // D·ª´ng auto connect khi r·ªùi trang
    window.addEventListener('beforeunload', () => {
        if (isAutoConnecting) {
            clearInterval(autoConnectInterval);
        }
    });

    // Prevent double-tap zoom
    document.addEventListener('touchend', (e) => {
        const now = Date.now();
        const DOUBLE_TAP_DELAY = 300;
        if (now - lastTap < DOUBLE_TAP_DELAY) {
            e.preventDefault();
        }
        lastTap = now;
    });

    // Improve button touch response
    const buttons = document.querySelectorAll('button');
    buttons.forEach(button => {
        button.addEventListener('touchstart', () => {
            button.classList.add('button-active');
        });
        button.addEventListener('touchend', () => {
            button.classList.remove('button-active');
        });
    });

    // Th√™m event listener cho n√∫t g·ª≠i
    const sendButton = document.getElementById('sendButton');
    sendButton.addEventListener('click', () => {
        sendMessage();
    });

    // Th√™m event listener cho ph√≠m Enter trong input
    const messageInput = document.getElementById('messageInput');
    messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    // Th√™m event listener cho n√∫t Next Stranger
    const nextButton = document.getElementById('nextButton');
    nextButton.addEventListener('click', () => {
        if (socket && socket.readyState === WebSocket.OPEN) {
            try {
                socket.send(JSON.stringify({
                    type: 'disconnect'
                }));
            } catch (error) {
                console.error('L·ªói khi g·ª≠i tin nh·∫Øn ng·∫Øt k·∫øt n·ªëi:', error);
            }
        }
        findNewPartner();
    });

    // Th√™m event listener cho logo
    const logoElement = document.querySelector('.logo-image');
    if (logoElement) {
        logoElement.addEventListener('click', () => {
            window.location.href = './index.html';
        });
    }

    // X·ª≠ l√Ω emoji picker
    const emojiButton = document.getElementById('emojiButton');
    const emojiPicker = document.getElementById('emojiPicker');

    // Kh·ªüi t·∫°o emoji picker
    initializeEmojiPicker();

    // Toggle emoji picker
    emojiButton.addEventListener('click', () => {
        emojiPicker.classList.toggle('hidden');
    });

    // ƒê√≥ng emoji picker khi click ra ngo√†i
    document.addEventListener('click', (e) => {
        if (!emojiPicker.contains(e.target) && !emojiButton.contains(e.target)) {
            emojiPicker.classList.add('hidden');
        }
    });

    // ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh khi trang web m·ªõi t·∫£i
    const onlineCountElement = document.getElementById('onlineCount');
    if (onlineCountElement) {
        onlineCountElement.textContent = '5000+';
    }

    // Th√™m x·ª≠ l√Ω b√†n ph√≠m ·∫£o cho mobile
    document.addEventListener('DOMContentLoaded', () => {
        const messageInput = document.getElementById('messageInput');
        
        // X·ª≠ l√Ω khi b√†n ph√≠m hi·ªán l√™n
        messageInput.addEventListener('focus', () => {
            document.body.classList.add('keyboard-open');
            // Scroll ƒë·∫øn input sau m·ªôt ch√∫t delay
            setTimeout(() => {
                messageInput.scrollIntoView({ behavior: 'smooth' });
            }, 100);
        });

        // X·ª≠ l√Ω khi b√†n ph√≠m ·∫©n ƒëi
        messageInput.addEventListener('blur', () => {
            document.body.classList.remove('keyboard-open');
        });
    });

    // L·∫•y danh s√°ch video t·ª´ server
    fetchAvailableVideos();
    
    // ƒê·∫∑t timeout cho l·∫ßn ƒë·∫ßu khi t·∫£i trang
    matchTimeoutId = setTimeout(() => {
        if (!isConnected) {
            playRandomVideo();
        }
    }, randomVideoTimeout); // 8 gi√¢y
});

// Th√™m v√†o cu·ªëi file script.js
document.addEventListener('DOMContentLoaded', () => {
    const logoElement = document.querySelector('.logo-image');
    if (logoElement) {
        logoElement.addEventListener('click', () => {
            window.location.href = './index.html';
        });
    }
});

// C·∫≠p nh·∫≠t h√†m findNewPartner ƒë·ªÉ ƒë·∫£m b·∫£o t√¨m ƒë√∫ng partner
function findNewPartner() {
    reconnectAttempts = 0;
    
    // D·ª´ng video ng·∫´u nhi√™n n·∫øu ƒëang ph√°t
    stopRandomVideo();
    
    // X√≥a timeout c≈© n·∫øu c√≥
    if (matchTimeoutId) {
        clearTimeout(matchTimeoutId);
    }
    
    // ƒê√≥ng socket c≈© an to√†n
    closeSocketSafely();
    
    // D·ªçn d·∫πp c√°c k·∫øt n·ªëi
    cleanupConnections();
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i l√† ƒëang ch·ªù
    updateConnectionStatus('waiting');
    addSystemMessage('Looking for a new stranger...');
    
    // T·∫°o k·∫øt n·ªëi m·ªõi
    setTimeout(() => {
        connectWebSocket();
    }, 1000);

    // Reset ƒë·∫øm ng∆∞·ª£c n·∫øu ƒëang b·∫≠t auto connect
    if (isAutoConnecting) {
        autoConnectCountdown = 10;
        const statusBadge = document.querySelector('#autoConnectBtn .status-badge');
        if (statusBadge) {
            statusBadge.textContent = '10s';
        }
    }
}

// Th√™m h√†m d·ªçn d·∫πp k·∫øt n·ªëi
function cleanupConnections() {
    // X√≥a timeout t√¨m ng∆∞·ªùi n·∫øu c√≥
    if (matchTimeoutId) {
        clearTimeout(matchTimeoutId);
        matchTimeoutId = null;
    }
    
    // D·ª´ng video ng·∫´u nhi√™n n·∫øu ƒëang ph√°t
    stopRandomVideo();
    
    // D·ªçn d·∫πp WebRTC
    if (peerConnection) {
        try {
            // X√≥a t·∫•t c·∫£ event handlers
            peerConnection.ontrack = null;
            peerConnection.onicecandidate = null;
            peerConnection.oniceconnectionstatechange = null;
            
            peerConnection.close();
            peerConnection = null;
        } catch (error) {
            console.error('Error closing peer connection:', error);
        }
    }

    // D·ªçn d·∫πp video streams
    if (remoteVideo.srcObject) {
        try {
            remoteVideo.pause();
            const tracks = remoteVideo.srcObject.getTracks();
            tracks.forEach(track => track.stop());
            remoteVideo.srcObject = null;
        } catch (error) {
            console.error('Error cleaning up video streams:', error);
        }
    }

    if (localStream) {
        try {
            localStream.getTracks().forEach(track => track.stop());
        } catch (error) {
            console.error('Error cleaning up local stream:', error);
        }
    }

    // X√≥a tin nh·∫Øn c≈©
    chatMessages.innerHTML = '';

    // Reset tr·∫°ng th√°i
    isClosingSocket = false;
    isConnected = false;
    isReconnecting = false;

    // X√≥a ƒë·∫øm ng∆∞·ª£c n·∫øu c√≥
    if (countdownInterval) {
        clearInterval(countdownInterval);
        countdownInterval = null;
    }
}

// Th√™m h√†m x·ª≠ l√Ω y√™u c·∫ßu k·∫øt n·ªëi
function handleConnectionRequest(fromId) {
    // T·∫°o v√† hi·ªÉn th·ªã popup x√°c nh·∫≠n
    const confirmBox = document.createElement('div');
    confirmBox.className = 'confirm-connection-popup';
    confirmBox.innerHTML = `
        <div class="confirm-content">
            <h3>Connection Request</h3>
            <p>User ID: ${fromId} wants to connect with you</p>
            <div class="confirm-buttons">
                <button class="accept-btn">Accept</button>
                <button class="reject-btn">Reject</button>
            </div>
        </div>
    `;
    document.body.appendChild(confirmBox);

    // X·ª≠ l√Ω c√°c n√∫t
    const acceptBtn = confirmBox.querySelector('.accept-btn');
    const rejectBtn = confirmBox.querySelector('.reject-btn');

    return new Promise((resolve) => {
        acceptBtn.onclick = () => {
            confirmBox.remove();
            resolve(true);
        };
        rejectBtn.onclick = () => {
            confirmBox.remove();
            resolve(false);
        };
    });
}

// Th√™m x·ª≠ l√Ω khi r·ªùi trang
window.addEventListener('beforeunload', () => {
    isClosingSocket = true;
    if (socket) {
        socket.close();
    }
    if (peerConnection) {
        peerConnection.close();
    }
});

// Th√™m h√†m kh·ªüi t·∫°o emoji picker
function initializeEmojiPicker() {
    const emojiList = document.querySelector('.emoji-list');
    const categories = document.querySelectorAll('.emoji-category');

    // Hi·ªÉn th·ªã emoji m·∫∑c ƒë·ªãnh (smileys)
    showEmojisForCategory('smileys');

    // X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi category
    categories.forEach(category => {
        category.addEventListener('click', () => {
            categories.forEach(c => c.classList.remove('active'));
            category.classList.add('active');
            showEmojisForCategory(category.dataset.category);
        });
    });
}

// H√†m hi·ªÉn th·ªã emoji theo category
function showEmojisForCategory(category) {
    const emojiList = document.querySelector('.emoji-list');
    emojiList.innerHTML = '';

    emojis[category].forEach(emoji => {
        const emojiItem = document.createElement('div');
        emojiItem.className = 'emoji-item';
        emojiItem.textContent = emoji;
        emojiItem.addEventListener('click', () => {
            insertEmoji(emoji);
        });
        emojiList.appendChild(emojiItem);
    });
}

// H√†m ch√®n emoji v√†o input
function insertEmoji(emoji) {
    const messageInput = document.getElementById('messageInput');
    const start = messageInput.selectionStart;
    const end = messageInput.selectionEnd;
    const text = messageInput.value;
    const before = text.substring(0, start);
    const after = text.substring(end);
    
    messageInput.value = before + emoji + after;
    messageInput.selectionStart = messageInput.selectionEnd = start + emoji.length;
    messageInput.focus();
}

// Th√™m h√†m ƒë·ªÉ format s·ªë ng∆∞·ªùi online
function formatOnlineCount(count) {
    if (count >= 5000) {
        return `${count.toLocaleString()}+`;
    }
    return count.toLocaleString();
}

// C·∫≠p nh·∫≠t h√†m handleUserConnected ƒë·ªÉ ƒë·∫£m b·∫£o d·ª´ng video ng·∫´u nhi√™n khi c√≥ ng∆∞·ªùi th·∫≠t k·∫øt n·ªëi
function handleUserConnected() {
    // D·ª´ng video ng·∫´u nhi√™n n·∫øu ƒëang ph√°t
    if (isPlayingRandomVideo) {
        stopRandomVideo();
    }
    
    isConnected = true;
    
    // X√≥a timeout t√¨m ng∆∞·ªùi
    if (matchTimeoutId) {
        clearTimeout(matchTimeoutId);
        matchTimeoutId = null;
    }
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i k·∫øt n·ªëi
    updateConnectionStatus('connected');
    
    // Kh·ªüi t·∫°o k·∫øt n·ªëi video
    if (chatMode === 'video' && !peerConnection) {
        initializePeerConnection().then(() => {
            // T·∫°o v√† g·ª≠i offer
            peerConnection.createOffer({
                offerToReceiveAudio: true,
                offerToReceiveVideo: true
            }).then(offer => {
                return peerConnection.setLocalDescription(offer).then(() => {
                    socket.send(JSON.stringify({
                        type: 'webrtc',
                        webrtcData: {
                            type: 'offer',
                            offer: offer
                        }
                    }));
                });
            }).catch(e => {
                console.error('Error creating offer:', e);
            });
        }).catch(e => {
            console.error('Error initializing peer connection:', e);
        });
    }
    
    addSystemMessage('Connected with a stranger!');
}

// Th√™m h√†m x·ª≠ l√Ω tin nh·∫Øn WebRTC
async function handleWebRTCMessage(message) {
    const webrtcData = message.webrtcData;
    try {
        if (webrtcData.type === 'offer') {
            console.log('Received offer, creating answer...');
            if (!peerConnection) {
                await initializePeerConnection();
            }
            await peerConnection.setRemoteDescription(new RTCSessionDescription(webrtcData.offer));
            const answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);
            
            socket.send(JSON.stringify({
                type: 'webrtc',
                webrtcData: {
                    type: 'answer',
                    answer: answer
                }
            }));
        } else if (webrtcData.type === 'answer') {
            console.log('Received answer, setting remote description');
            if (peerConnection) {
                await peerConnection.setRemoteDescription(new RTCSessionDescription(webrtcData.answer));
    }
        } else if (webrtcData.type === 'candidate' && peerConnection) {
            console.log('Received ICE candidate');
            try {
                await peerConnection.addIceCandidate(new RTCIceCandidate(webrtcData.candidate));
            } catch (e) {
                console.error('Error adding received ICE candidate:', e);
            }
        }
    } catch (error) {
        console.error('Error handling WebRTC message:', error);
    }
}

// C·∫≠p nh·∫≠t h√†m sendMessage ƒë·ªÉ h·ªó tr·ª£ ph·∫£n h·ªìi t·ª± ƒë·ªông khi ƒëang ph√°t video ng·∫´u nhi√™n
function sendMessage() {
    const messageInput = document.getElementById('messageInput');
    const text = messageInput.value.trim();
    
    if (text && socket && socket.readyState === WebSocket.OPEN) {
        try {
            socket.send(JSON.stringify({
                type: 'message',
                text: text
            }));
            addMessage(text, 'sent');
            messageInput.value = '';
            
            // Th√™m ph·∫£n h·ªìi t·ª± ƒë·ªông khi ƒëang ph√°t video ng·∫´u nhi√™n
            if (isPlayingRandomVideo && !isConnected) {
                // T·∫°o ƒë·ªô tr·ªÖ ng·∫´u nhi√™n ƒë·ªÉ gi·∫£ l·∫≠p ng∆∞·ªùi th·∫≠t ƒëang g√µ
                const replyDelay = 1000 + Math.random() * 3000;
                setTimeout(() => {
                    if (isPlayingRandomVideo) {
                        const replies = [
                            "Oh, that's interesting!",
                            "I see what you mean",
                            "Tell me more about that",
                            "I'm having a good time chatting with you",
                            "That's cool! What else do you like to do?",
                            "Where are you from?",
                            "Nice to meet you üòä",
                            "Haha, that's funny!"
                        ];
                        const randomReply = replies[Math.floor(Math.random() * replies.length)];
                        addMessage(randomReply, 'stranger');
                    }
                }, replyDelay);
            }
        } catch (error) {
            console.error('L·ªói khi g·ª≠i tin nh·∫Øn:', error);
            addSystemMessage('Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    }
}

// C·∫≠p nh·∫≠t h√†m ƒë·ªÉ x·ª≠ l√Ω disconnect
function handleDisconnect() {
    // D·ªçn d·∫πp c√°c k·∫øt n·ªëi
    if (peerConnection) {
        peerConnection.close();
        peerConnection = null;
    }
    
    isConnected = false;
    updateConnectionStatus('disconnected');
    addSystemMessage('Stranger has disconnected');
    
    // N·∫øu auto connect ƒëang b·∫≠t, t√¨m ng∆∞·ªùi m·ªõi
    if (isAutoConnecting) {
        setTimeout(findNewPartner, 1000);
    } else {
        // ƒê·∫∑t timeout ƒë·ªÉ ph√°t video ng·∫´u nhi√™n n·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c ng∆∞·ªùi
        matchTimeoutId = setTimeout(() => {
            if (!isConnected) {
                playRandomVideo();
            }
        }, randomVideoTimeout);
    }
}

// Th√™m h√†m x·ª≠ l√Ω khi video k·∫øt th√∫c
function handleVideoEnd() {
    if (isPlayingRandomVideo) {
        console.log('Video ended, disconnecting...');
        stopRandomVideo();
        handleDisconnect();
        
        // ƒê·ª£i m·ªôt kho·∫£ng th·ªùi gian tr∆∞·ªõc khi t√¨m partner m·ªõi
        setTimeout(() => {
            if (!isConnected) {
                // Th·ª≠ t√¨m ng∆∞·ªùi th·∫≠t tr∆∞·ªõc
                findNewPartner();
                
                // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c ng∆∞·ªùi th·∫≠t sau m·ªôt kho·∫£ng th·ªùi gian, m·ªõi ph√°t video ng·∫´u nhi√™n kh√°c
                // ƒê·∫£m b·∫£o video kh√°c v·ªõi video v·ª´a ph√°t
                setTimeout(() => {
                    if (!isConnected && availableVideos.length > 0) {
                        playRandomVideo();
                    } else if (!isConnected) {
                        // N·∫øu h·∫øt video, y√™u c·∫ßu danh s√°ch m·ªõi
                        fetchAvailableVideos().then(() => {
                            if (!isConnected && availableVideos.length > 0) {
                                setTimeout(() => {
                                    if (!isConnected) {
                                        playRandomVideo();
                                    }
                                }, 1000);
                            }
                        });
                    }
                }, randomVideoTimeout);
            }
        }, 1000);
    }
} 